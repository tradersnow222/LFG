pragma solidity ^0.8.0;

contract practiceWithArrays {
    
    uint[] public myArray;
    uint[] public myArray2;
    uint[200] public myFixedLengthArray;

        function push(uint number) public {
            myArray.push(number);
        }

        function pop() public {
            myArray.pop();
        }

        function getLength() public view returns (uint) {
            return myArray.length;
        }

        function remove(uint i) public {
            delete myArray [i];
        }

        uint[] public changeArray;


        function removeElement(uint i) public {
            changeArray[i] = changeArray[changeArray.length - 1];
            changeArray.pop();
        }

        function test() public {

           /*
            changeArray.push(1);
            changeArray.push(2);
            changeArray.push(3);
            changeArray.push(4);
            OR 
            probs more efficient to just use this 'for' loop:
            */

            for(uint i = 1; i <=4; i++) {
            changeArray.push(i);
            }
        }

        function getChangeArray() public view returns(uint[] memory) {
            return changeArray;
        }
}



