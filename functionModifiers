pragma solidity ^0.8.0;

/* Excercise: 
- Create a function modifier called costs for the register function that checks to
see the sender's (hint look up msg.value) requires to be greater than or equal 
to the price. Second hint, the function modifier should take an argument. */

contract Owner {

    address owner;
    
    // upon deployment, set address to the owner (msg.sender)
    
    constructor() {
        owner = msg.sender;
    }

// to write a modifier, statically declare the modifier keyword and then name it
// and inside, write the logic and modifications 

    modifier onlyOwner {
        require(msg.sender == owner);
        _; 
        // the underscore continues with the function
    }

    modifier costs (uint price) {
        require(msg.value >= price);
        _;
    }
}

contract Register is Owner {

    mapping (address => bool) registeredAddresses;
    uint price;

    constructor(uint initialPrice) {
        price = initialPrice;
    }
 
 // function register will set msg.sender (current caller) to true
    
    function register() public payable costs(price) {
        registeredAddresses[msg.sender] = true;
    }

    function changePrice(uint _price) public onlyOwner {
        price = _price;
    }
}



